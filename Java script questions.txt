uuArray MethodsHow does the map() method work in JavaScript?The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // [2, 4, 6, 8, 10]What is the difference between forEach() and map()?forEach() executes a provided function once for each array element, but does not return a new array. map() executes a provided function once for each array element and returns a new array with the results.const numbers = [1, 2, 3, 4, 5];
numbers.forEach(num => console.log(num * 2)); // 2, 4, 6, 8, 10
const doubled = numbers.map(num => num * 2);
console.log(doubled); // [2, 4, 6, 8, 10]Explain the filter() method and provide an example.The filter() method creates a new array with all elements that pass the test implemented by the provided function.const numbers = [1, 2, 3, 4, 5];
const evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers); // [2, 4]How does the reduce() method work? Provide an example.The reduce() method executes a reducer function on each element of the array, resulting in a single output value.const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // 15What is the purpose of the find() method in JavaScript?The find() method returns the value of the first element in the provided array that satisfies the provided testing function.const numbers = [1, 2, 3, 4, 5];
const found = numbers.find(num => num > 3);
console.log(found); // 4String MethodsExplain the split() method with an example.The split() method divides a string into an ordered list of substrings, puts these substrings into an array, and returns the array.const str = "Hello World";
const words = str.split(" ");
console.log(words); // ["Hello", "World"]How does the join() method work?The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string.const words = ["Hello", "World"];
const str = words.join(" ");
console.log(str); // "Hello World"What is the substring() method and how is it different from slice()?The substring() method returns the part of the string between the start and end indexes, or to the end of the string.The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.const str = "Hello World";
console.log(str.substring(0, 5)); // "Hello"
console.log(str.slice(0, 5));     // "Hello"How do you use the replace() method in JavaScript?The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.const str = "Hello World";
const newStr = str.replace("World", "Universe");
console.log(newStr); // "Hello Universe"What does the includes() method do in JavaScript?The includes() method determines whether one string may be found within another string, returning true or false as appropriate.const str = "Hello World";
console.log(str.includes("World")); // trueThese questions and examples should give experienced professionals a solid understanding of fundamental JavaScript array and string methods, often asked in technical interviews.

Debouncing and ThrottlingDebouncing:Debouncing is a technique to limit the rate at which a function is executed. It ensures that a function is only called once after a specified period of time has elapsed since the last call.Example:A common use case for debouncing is handling search input in a search bar to avoid making API calls on every keystroke.function debounce(func, delay) {
  let debounceTimer;
  return function (...args) {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => func.apply(this, args), delay);
  };
}

const handleSearch = debounce((event) => {
  console.log('Searching for:', event.target.value);
}, 300);

document.getElementById('searchInput').addEventListener('input', handleSearch);Throttling:Throttling ensures that a function is called at most once in a specified period. It prevents a function from being called too frequently.Example:Throttling can be used for optimizing scroll events to improve performance.function throttle(func, limit) {
  let lastFunc;
  let lastRan;
  return function (...args) {
    if (!lastRan) {
      func.apply(this, args);
      lastRan = Date.now();
    } else {
      clearTimeout(lastFunc);
      lastFunc = setTimeout(() => {
        if ((Date.now() - lastRan) >= limit) {
          func.apply(this, args);
          lastRan = Date.now();
        }
      }, limit - (Date.now() - lastRan));
    }
  };
}

const handleScroll = throttle(() => {
  console.log('Scroll event triggered');
}, 1000);

window.addEventListener('scroll', handleScroll);Shallow Copy and Deep CopyShallow Copy:A shallow copy of an object is a copy of the object, but the nested objects are shared between the original and the copy. Changes to nested objects will affect both the original and the copied object.Example:Using Object.assign() or the spread operator (...) to create a shallow copy.const original = { a: 1, b: { c: 2 } };
const shallowCopy = { ...original };

shallowCopy.b.c = 3;

console.log(original.b.c); // 3
console.log(shallowCopy.b.c); // 3Deep Copy:A deep copy of an object creates a copy of the object and recursively copies all nested objects. Changes to nested objects do not affect the original object.Example:Using JSON.parse(JSON.stringify()) for a simple deep copy.const original = { a: 1, b: { c: 2 } };
const deepCopy = JSON.parse(JSON.stringify(original));

deepCopy.b.c = 3;

console.log(original.b.c); // 2
console.log(deepCopy.b.c); // 3Note:JSON.parse(JSON.stringify()) has limitations, such as not copying functions, undefined, or special objects like Date and RegExp. For more complex objects, a deep copy utility function is required.Example using a custom deep copy function:function deepCopy(obj) {
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }

  if (Array.isArray(obj)) {
    const arrCopy = [];
    for (const item of obj) {
      arrCopy.push(deepCopy(item));
    }
    return arrCopy;
  }

  const objCopy = {};
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      objCopy[key] = deepCopy(obj[key]);
    }
  }
  return objCopy;
}

const original = { a: 1, b: { c: 2 }, d: [3, 4, { e: 5 }] };
const deepCopyObj = deepCopy(original);

deepCopyObj.b.c = 3;
deepCopyObj.d[2].e = 6;

console.log(original.b.c); // 2
console.log(original.d[2].e); // 5
console.log(deepCopyObj.b.c); // 3
console.log(deepCopyObj.d[2].e); // 6These examples demonstrate how to implement debouncing, throttling, and both shallow and deep copies in JavaScript.