Problem: Given an array of numbers [1, 5, 3, 8, 2], use map to add 10 to each element, and then filter out numbers greater than 12.
javascript
Copy code
const array = [1, 5, 3, 8, 2];
const result = array.map(num => num + 10).filter(num => num <= 12);
console.log(result); // [11, 13]
Explanation: map adds 10 to





You said:
Again all examples added map.. just need normal javascript coding examples for array , string and es6 
ChatGPT said:
ChatGPT
Here are 20 JavaScript coding problems focused on arrays, strings, and ES6 features, without using map or filter:

Array Problems
Problem: Find the second largest number in an array [10, 5, 20, 8].

javascript
Copy code
const array = [10, 5, 20, 8];
array.sort((a, b) => b - a);
const secondLargest = array[1];
console.log(secondLargest); // 10
Explanation: The array is sorted in descending order, and the second element is the second largest.

Problem: Remove duplicates from an array [1, 2, 2, 3, 4, 4, 5] using a Set.

javascript
Copy code
const array = [1, 2, 2, 3, 4, 4, 5];
const uniqueArray = [...new Set(array)];
console.log(uniqueArray); // [1, 2, 3, 4, 5]
Explanation: Set automatically removes duplicates, and the result is converted back to an array.

Problem: Rotate an array [1, 2, 3, 4, 5] to the right by 2 positions.

javascript
Copy code
const array = [1, 2, 3, 4, 5];
const rotatedArray = array.slice(-2).concat(array.slice(0, -2));
console.log(rotatedArray); // [4, 5, 1, 2, 3]
Explanation: The last two elements are moved to the front.

Problem: Merge two sorted arrays [1, 3, 5] and [2, 4, 6] into one sorted array.

javascript
Copy code
const array1 = [1, 3, 5];
const array2 = [2, 4, 6];
const mergedArray = array1.concat(array2).sort((a, b) => a - b);
console.log(mergedArray); // [1, 2, 3, 4, 5, 6]
Explanation: The arrays are concatenated and then sorted.

Problem: Find the intersection of two arrays [1, 2, 3, 4] and [3, 4, 5, 6].

javascript
Copy code
const array1 = [1, 2, 3, 4];
const array2 = [3, 4, 5, 6];
const intersection = array1.filter(value => array2.includes(value));
console.log(intersection); // [3, 4]
Explanation: The intersection is found by checking if elements in one array exist in the other.

String Problems
Problem: Check if a string "racecar" is a palindrome.

javascript
Copy code
const str = "racecar";
const isPalindrome = str === str.split('').reverse().join('');
console.log(isPalindrome); // true
Explanation: The string is compared to its reverse.

Problem: Count the number of vowels in the string "javascript".

javascript
Copy code
const str = "javascript";
const vowels = str.match(/[aeiou]/gi);
const count = vowels ? vowels.length : 0;
console.log(count); // 3
Explanation: The match method finds all vowels, and the length gives the count.

Problem: Reverse the words in the string "hello world".

javascript
Copy code
const str = "hello world";
const reversedWords = str.split(' ').reverse().join(' ');
console.log(reversedWords); // "world hello"
Explanation: The string is split into words, reversed, and joined back.

Problem: Convert the first letter of each word in "hello world" to uppercase.

javascript
Copy code
const str = "hello world";
const capitalized = str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
console.log(capitalized); // "Hello World"
Explanation: Each word's first letter is capitalized.

Problem: Check if the string "abc" is a substring of "abcdef".

javascript
Copy code
const str1 = "abc";
const str2 = "abcdef";
const isSubstring = str2.includes(str1);
console.log(isSubstring); // true
Explanation: includes checks if one string is part of another.

ES6 Features Problems
Problem: Use destructuring to extract values from an object {a: 1, b: 2}.

javascript
Copy code
const obj = {a: 1, b: 2};
const {a, b} = obj;
console.log(a, b); // 1, 2
Explanation: Object destructuring assigns values to variables.

Problem: Use the spread operator to merge two objects {a: 1} and {b: 2}.

javascript
Copy code
const obj1 = {a: 1};
const obj2 = {b: 2};
const mergedObj = {...obj1, ...obj2};
console.log(mergedObj); // {a: 1, b: 2}
Explanation: The spread operator merges properties of objects.

Problem: Use a template literal to create the string "Hello, John!" with the variable name = "John".

javascript
Copy code
const name = "John";
const greeting = `Hello, ${name}!`;
console.log(greeting); // "Hello, John!"
Explanation: Template literals allow for easy string interpolation.

Problem: Use let and const to declare variables that can and cannot be reassigned.

javascript
Copy code
let age = 25;
const name = "John";
age = 26; // Allowed
// name = "Doe"; // Error: Assignment to constant variable.
console.log(age); // 26
Explanation: let allows reassignment, while const does not.

Problem: Create an arrow function that returns the square of a number.

javascript
Copy code
const square = num => num * num;
console.log(square(5)); // 25
Explanation: Arrow functions provide a concise syntax for defining functions.

Problem: Use default parameters in a function to multiply two numbers, defaulting to 1.

javascript
Copy code
function multiply(a = 1, b = 1) {
  return a * b;
}
console.log(multiply(5)); // 5
console.log(multiply(5, 2)); // 10
Explanation: Default parameters provide fallback values if arguments are not passed.

Problem: Use rest parameters to sum an arbitrary number of arguments.

javascript
Copy code
function sum(...args) {
  return args.reduce((acc, num) => acc + num, 0);
}
console.log(sum(1, 2, 3, 4)); // 10
Explanation: The rest parameter collects all arguments into an array.

Problem: Use find to locate the first even number in the array [1, 3, 7, 8, 10].

javascript
Copy code
const array = [1, 3, 7, 8, 10];
const firstEven = array.find(num => num % 2 === 0);
console.log(firstEven); // 8
Explanation: find returns the first element that satisfies the condition.

Problem: Use Promise to create a function that resolves "Hello" after 2 seconds.

javascript
Copy code
const greet = () => {
  return new Promise(resolve => {
    setTimeout(() => resolve("Hello"), 2000);
  });
};
greet().then(message => console.log(message)); // "Hello" (after 2 seconds)
Explanation: A Promise is used to handle asynchronous operations.

Problem: Use Array.from to create an array from a string "hello".

javascript
Copy code
const str = "hello";
const array = Array.from(str);
console.log(array); // ["h", "e", "l", "l", "o"]
Explanation: Array.from converts a string into an array of characters.
