import { render, screen, waitFor } from "@testing-library/react";
import { BrowserRouter } from "react-router-dom";
import Flights from "./Flights";
import { Provider } from "react-redux";
import { store } from "../../app/store";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import { fetchFlights } from "./flightService";

jest.mock("axios");

const mockStore = configureStore([thunk]);

describe("Flights component", () => {
  test("renders without errors", () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <Flights />
        </BrowserRouter>
      </Provider>
    );

    const headingEl = screen.getByRole("heading", { name: /Flights list/i });
    expect(headingEl).toBeInTheDocument();
  });

  test("fetches flight data and displays it correctly", async () => {
    // Sample flight data to mock the response from the API
    const mockFlightData = [
      {
        id: 1,
        flightNo: "FL123",
        airline: "Mock Airline",
        source: "City A",
        destination: "City B",
        depatureTime: "2023-07-21T10:00:00.000Z",
      },
      // Add more sample flight data here if needed
    ];

    // Mock the axios.get function to return the mock flight data
    jest.mock("axios", () => ({
      get: jest.fn().mockResolvedValueOnce({ data: mockFlightData }),
    }));

    // Create a mock store with middleware for handling async actions
    const mockStoreWithMiddleware = mockStore({
      flights: {
        loading: false,
        error: null,
        flights: [],
      },
    });

    // Use mockImplementationOnce to simulate the resolved async thunk result
    jest
      .spyOn(mockStoreWithMiddleware, "dispatch")
      .mockImplementationOnce(() =>
        mockStoreWithMiddleware.dispatch(fetchFlights())
      );

    // Render the Flight component with the mock store
    render(
      <Provider store={mockStoreWithMiddleware}>
        <BrowserRouter>
          <Flights />
        </BrowserRouter>
      </Provider>
    );

    // Wait for the component to render and the flight data to be displayed
    await waitFor(() => {
      // Check if the flight data is rendered correctly in the table rows
      mockFlightData.forEach(async (flight) => {
        const flightNoElement = await screen.findByText(flight.flightNo);
        expect(flightNoElement).toBeInTheDocument();
        const airlineElement = await screen.findByText(flight.airline);
        expect(airlineElement).toBeInTheDocument();
        // Add more assertions for other properties as needed
      });
    });
  });
});
