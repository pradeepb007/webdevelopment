import React, { useState } from 'react';
import * as XLSX from 'xlsx';

function App() {
  const defaultTableData = [['Emp Name', 'Email', 'State', 'ID']];

  const [tableData, setTableData] = useState(defaultTableData);
  const [editableRowIndex, setEditableRowIndex] = useState(null);
  const [backupData, setBackupData] = useState([]);

  const handleExcelUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = (evt) => {
      const bstr = evt.target.result;
      const workbook = XLSX.read(bstr, { type: 'binary' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });
      setTableData(data);
    };
    reader.readAsBinaryString(file);
  };

  const handleExcelDownload = () => {
    const worksheet = XLSX.utils.aoa_to_sheet(tableData);
    const newWorkbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(newWorkbook, worksheet, 'Sheet1');
    XLSX.writeFile(newWorkbook, 'table_data.xlsx');
  };

  const handleEdit = (rowIndex) => {
    setEditableRowIndex(rowIndex);
    setBackupData([...tableData]);
  };

  const handleSave = () => {
    setEditableRowIndex(null);
    setBackupData([]);
  };

  const handleCancel = () => {
    setTableData(backupData);
    setEditableRowIndex(null);
    setBackupData([]);
  };

  const handleDelete = (rowIndex) => {
    const newData = [...tableData];
    newData.splice(rowIndex, 1);
    setTableData(newData);
  };

  const handleAddRow = () => {
    const newRow = Array(tableData[0].length).fill('');
    setTableData([...tableData, newRow]);
    setEditableRowIndex(tableData.length); // Set the index of the new row to be editable
  };

  return (
    <div>
      <input type="file" onChange={handleExcelUpload} />
      <button onClick={handleExcelDownload}>Download Excel</button>
      <button onClick={handleAddRow}>Add Row</button>
      <table>
        <tbody>
          {tableData.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, cellIndex) => (
                <td key={cellIndex}>
                  {editableRowIndex === rowIndex ? (
                    <input
                      type="text"
                      value={cell}
                      onChange={(e) => {
                        const newData = [...tableData];
                        newData[rowIndex][cellIndex] = e.target.value;
                        setTableData(newData);
                      }}
                    />
                  ) : (
                    cell
                  )}
                </td>
              ))}
              <td>
                {editableRowIndex === rowIndex ? (
                  <>
                    <button onClick={handleSave}>Save</button>
                    <button onClick={handleCancel}>Cancel</button>
                  </>
                ) : (
                  <>
                    <button onClick={() => handleEdit(rowIndex)}>Edit</button>
                    <button onClick={() => handleDelete(rowIndex)}>Delete</button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default App;
